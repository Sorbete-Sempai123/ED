import numpy

from matplotlib import pyplot as mp

def funcion1(y1,y2):
    return -y1/2

def funcion2(y1,y2):
    return 4 - (0.3*y2) - y1/10

def funcion1Integrada(x):
    c1 = 4
    return c1*numpy.exp(-x/2)
def funcion2Integrada(x):
    c1 = -7.333
    c2 = 4
    return c1*numpy.exp(-0.3*x) - c2*numpy.exp(-0.8*x)/2*(numpy.exp(x/2)-numpy.exp(0.3*x)) + 13.333



def funcion3(y1,y2):
    return -y2/5

def funcion4(y1,y2):
    return y1

def funcion3Integrada(x):
    c1 = 0
    c2 = 1
    return c2*numpy.cos(x/numpy.sqrt(5)) - c1*numpy.sin(x/numpy.sqrt(5))/numpy.sqrt(5)
def funcion4Integrada(x):
    c1 = 0
    c2 = 1
    return 5**(1/2) * c2 * numpy.sin(x/numpy.sqrt(5)) + c1*numpy.cos(x/numpy.sqrt(5))


def SystemaEuler2Ecuaciones(x,y1,y2,xf,h,F1,F2):
    arr = [[x],[y1],[y2]]
    it = int((xf-x)/h) #it = iteraciones
    #Todo el for realiza el metodo de euler
    for i in range(it):
        #se usa un auxliar como apoyo para la derivada de la segunda funcion
        auxy1 = y1
        #Realizamos las operaciones
        y1 = y1 + F1(y1,y2)*h
        y2 = y2 + F2(auxy1,y2)*h
        #Hacemos que x avance en h
        x = x + h
        #Se agregan los datos al arr para facilitar recuperar los datos
        arr[0].append(x)
        arr[1].append(y1)
        arr[2].append(y2)
    #Imprime los valores finales
    print(F1(y1,y2))
    print(F2(y1,y2))
    return arr

#Parametros inciales
x = 0
y1 = 4
y2 = 6
xf = 2
h = 0.5

#Res retorna una lista con las aproximaciones del metodo de euler
res = SystemaEuler2Ecuaciones(x,y1,y2,xf,h,funcion1,funcion2)
#Imprimo los datos para poder escribirlos en el excel
print(res[0])
print(res[1])
print(res[2])

xpruebas = numpy.arange(0,2,0.001)
#Ploteando la funcion de la primera integral
mp.plot(xpruebas,[funcion1Integrada(i) for i in xpruebas],label="Funcion y1")
#Ploteando las aproximaciones de euler
mp.plot(res[0], res[1],label="Euler y1")

#Ploteando la funcion de la segunda integral
mp.plot(xpruebas, [funcion2Integrada(i) for i in xpruebas],label="Funcion y2")
#Ploteando las aproximaciones de euler
mp.plot(res[0], res[2],label="Euler y2")

mp.legend()
mp.show()

print("ga")
# Ejercicio 2
#Parametros inciales
x = 0
y1 = 1
y2 = 0
xf = 5
h = 0.5
xpruebas = numpy.arange(0,5,0.001)
#Usado el metodo de euler
res2 = SystemaEuler2Ecuaciones(x,y1,y2,xf,h,funcion3,funcion4)
#Ploteando la funcion de la primera integral
mp.plot(xpruebas,[funcion3Integrada(i) for i in xpruebas],label="Funcion3Integrada y1")
#Ploteando las aproximaciones de euler
mp.plot(res2[0], res2[1],label="Euler y1")

#Ploteando la funcion de la segunda integral
mp.plot(xpruebas, [funcion4Integrada(i) for i in xpruebas],label="Funcion4Integrada y2")
#Ploteando las aproximaciones de euler
mp.plot(res2[0], res2[2],label="Euler y2")


print(res2[0])
print(res2[1])
print(res2[2])
print([funcion3Integrada(i) for i in numpy.arange(0,5.1,0.5)])
print([funcion4Integrada(i) for i in numpy.arange(0,5.1,0.5)])

mp.legend()
mp.show()



